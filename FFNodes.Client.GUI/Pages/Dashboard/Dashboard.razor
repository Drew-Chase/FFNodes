@using Chase.FFmpeg.Downloader;
@using FFNodes.Client.Core.Data;
@using FFNodes.Client.Core.Networking;
@using FFNodes.Client.Core;
@using FFNodes.Client.GUI.Data;
@using FFNodes.Core.Data;
@using FFNodes.Core.Model;
@using FFNodes.Core;
@using System.Diagnostics;
@using Newtonsoft.Json;
@inject IJSRuntime JSRuntime;

<section>
    <div class="col fill">
        <div class="row title-bar">
            <div class="page-title fill">dashboard</div>
            <div class="row">
                <img src="/images/@(ProcessManager.Instance.IsProcessing?"pause":"play").svg" alt="" class="button @(ProcessManager.Instance.IsProcessing?"primary":"secondary") media-buttons" @onclick=@StartProcessing>
                <img src="/images/stop.svg" alt="" class="button secondary media-buttons" @onclick=@(()=>{ ProcessManager.Instance.CancelProcessing(); ProcessManager.Instance.IsProcessing=false;StateHasChanged();})>
            </div>
        </div>
        <div id="file-items" class="row list fill">
            @foreach ((Guid fileId, FileItem file) in ProcessManager.Instance.Files)
            {
                <FileItemComponent File=file />
            }
        </div>
    </div>
</section>

@if (SelectedFileId != Guid.Empty)
{
    <FileDetailsComponent File=ProcessManager.Instance.Files[SelectedFileId] />
}

@code {

    private Guid SelectedFileId { get; set; } = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        await FFmpegDownloader.Instance.GetLatest(Directories.FFmpeg);
        ProcessManager.Instance.OnUpdateEvent += (_, _) => InvokeAsync(StateHasChanged);
        await base.OnInitializedAsync();
    }

    private async Task StartProcessing()
    {
        if (ProcessManager.Instance.IsProcessing = !ProcessManager.Instance.IsProcessing)
        {
            StateHasChanged();
            Guid fileId = await ProcessManager.Instance.DownloadNextFile();
            if (fileId != Guid.Empty && await ProcessManager.Instance.ProcessFile(fileId))
            {
                await ProcessManager.Instance.UploadFile(fileId);
            }
        }
    }

}
