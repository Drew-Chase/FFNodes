@page "/"
@using FFNodes.Client.Core.Networking;
@using FFNodes.Core.Model;
@using FFNodes.Server.Data;
@using Serilog;
<link href="/css/login.css" rel="stylesheet" />
<div id="landing" class="center horizontal vertical col">
    <img src="/images/Logo.svg" alt="FFNodes">
    <div id="form" class="col">
        <div class="floating-input fill">
            <input id="username" class="fill" type="text" @bind="Username" placeholder="" />
            <label for="username" class="fill">Username</label>
        </div>
        <div class="floating-input fill">
            @if (string.IsNullOrWhiteSpace(ConnectionLink))
            {
                <input id="connection-link" class="fill" type="url" @bind="ConnectionLink" placeholder="" />
            }
            else
            {
                <input id="connection-link" class="fill" type="url" @bind="ConnectionLink" placeholder="" readonly />
            }
            <label for="connection-link" class="fill">Connection Link</label>
        </div>
        <p class="error fill">@Error</p>
        <button class="primary" @onclick="Login">Connect <img src="/images/lock.svg" /> </button>
    </div>
</div>

<LoadingComponent Message="Loading..." IsFullscreen=true Active=IsLoading />


@code {
    private string Username { get; set; } = "";
    private string ConnectionLink { get; set; } = "";
    private string Error { get; set; } = "";
    private bool IsLoading { get; set; } = true;


    protected async override Task OnInitializedAsync()
    {
        await Update();

        AppConfig.Instance.ConfigurationSaved += async (s, e) => await Update();

        await base.OnInitializedAsync();
        IsLoading = false;
    }

    private async Task Update()
    {
        try
        {
            if (ConnectionLink != AppConfig.Instance.ConnectionUrl && Uri.TryCreate(AppConfig.Instance.ConnectionUrl, UriKind.Absolute, out Uri? connectionUri) && connectionUri.Scheme == "ffn")
            {
                ConnectionLink = AppConfig.Instance.ConnectionUrl;
                using FFAdvancedNetworkClient client = new(ConnectionLink);
                Log.Debug("Setting connection link to {LINK}", connectionUri);
                (bool success, User? user) = await client.LogInUser(AppConfig.Instance.UserId);
                Username = user?.Username ?? "";


                if (AppConfig.Instance.UserId != Guid.Empty && !string.IsNullOrWhiteSpace(ConnectionLink) && success && user != null)
                {
                    nav.NavigateTo("/dashboard");
                }
            }
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Log.Error(e, "Error updating connection link");
        }
    }

    private async Task Login()
    {
        Error = "";
        if (string.IsNullOrWhiteSpace(Username))
        {
            Error = "Username cannot be blank";
            return;
        }
        if (string.IsNullOrWhiteSpace(ConnectionLink))
        {
            Error = "Connection Link cannot be blank";
            return;
        }
        IsLoading = true;
        try
        {
            using FFAdvancedNetworkClient client = new(ConnectionLink);
            (bool success, User? user) = await client.CreateUser(Username);
            if (success && user != null)
            {
                AppConfig.Instance.UserId = user.Id;
                AppConfig.Instance.ConnectionUrl = ConnectionLink;
                AppConfig.Instance.Save();
                nav.NavigateTo("/dashboard");
                return;
            }
            else
            {
                Error = "Invalid Username or Connection Link";
            }
        }
        catch (Exception e)
        {
            Error = $"Error: {e.Message}";
        }
        IsLoading = false;
    }
}